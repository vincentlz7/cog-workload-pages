{"version":3,"sources":["components/history.js","components/Button.js","components/Header.js","components/Task.js","components/CalendarWithEditTime.js","components/Chart.js","components/Instruction.js","components/SelectDate.js","components/SubformBox.js","components/ContextForm.js","components/ReflectForm.js","components/AddPartOfDayTask.js","components/RedirectToNewPage.js","components/ReflectTask.js","utils/api.js","cw-icon.png","components/Login.js","icon.png","components/Landing.js","components/EndExperiment.js","components/OnBoardingInstructions.js","components/CalendarWithContextForm.js","components/CalendarWithReflectForm.js","components/TimeOfDay.js","components/RedirectWithPrompt.js","components/ExperimentersLogPage.js","App.js","reportWebVitals.js","index.js"],"names":["history","Button","color","text","onClick","style","backgroundColor","className","defaultProps","Header","title","onAdd","showAdd","useLocation","marginBottom","window","location","pathname","marginLeft","marginTop","fontFamily","fontWeight","Task","task","onToggle","onDelete","reminder","size","onDoubleClick","id","useStyles","makeStyles","fcday","CalendarWithEditTime","events","timeOfDay","date","onDrop","onEdit","classes","minTime","maxTime","undefined","length","today","Date","toISOString","slice","substring","class","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","initialView","eventColor","slotMinTime","slotMaxTime","editable","expandRows","eventDrop","eventResize","eventTextColor","initialDate","eventClick","info","Alert","fire","event","html","start","showCancelButton","showDenyButton","cancelButtonColor","confirmButtonText","cancelButtonText","denyButtonText","preConfirm","Promise","resolve","document","getElementById","value","then","result","isConfirmed","isDenied","icon","reverseButtons","remove","swalWithBootstrapButtons","dismiss","Swal","DismissReason","cancel","eventDurationEditable","headerToolbar","height","dayCellClassNames","getAveragePerActivity","tasks","averages_per_activity","count","cognitiveConsumption","cognitiveRegeneration","ret","activity","average","activityType","push","Chart","ScatterChart","width","margin","top","right","bottom","left","XAxis","type","dataKey","name","domain","hide","YAxis","Tooltip","cursor","strokeDasharray","ReferenceLine","y","Label","position","x","Scatter","data","fill","LabelList","intToWeekday","intToMonth","getValue","input_date","getDate","month","getMonth","getFullYear","getLabel","getDay","SelectDate","onUpdate","useState","redirectToNextPage","setRedirect","selectedOption","setSelectedOption","options","lastWeekDate","curr_day","setDate","i","label","generateLastWeek","to","onSubmit","e","preventDefault","alert","isMulti","classNamePrefix","onChange","map","o","required","action","SubformBox","props","isOpen","setIsOpen","console","log","children","display","flexDirection","textAlign","justifyContent","header","child","checked","target","alignSelf","isOpened","border","padding","ContextForm","taskID","updateRedirect","activityOptions","fetchTask","suboptions","setLocation","company","setCompany","setCognitiveConsumption","setCognitiveRegeneration","selectedActivityOption","setSelectedActivityOption","selectedActivitySuboptions","setSelectedActivitySuboptions","selectedLocationOption","setSelectedLocationOption","selectedCompanyOption","setSelectedCompanyOption","companySelected","setCompanySelected","redirect","activityName","end","warning","setWarning","otherLocationInput","placeholder","quantityBox","subopt","find","justifySelf","option","newQuantity","quantity","newOpt","newSelected","filter","companySelectInput","j","includes","alignItems","su","htmlFor","opt","selected","marginRight","min","max","marks","tipFormatter","dots","step","ReflectForm","locationOptions","companyOptions","selectedLocationOptionField","setSelectedLocationOptionField","selectedCompanyOptionField","setSelectedCompanyOptionField","companyNumberField","setCompanyNumberField","startField","setStartField","endField","setEndField","setActivityName","setStart","setEnd","a","fetch","res","json","useEffect","getTask","placeholderButtonLabel","AddPartOfDayTask","paddingBottom","variant","float","paddingRight","RedirectToNewPage","function_to_check","url","alert_text","ReflectTask","current_fs","next_fs","previous_fs","animating","current_idx","locationRef","companyRef","companyNumber","setCompanyNumber","sstart","setSstart","eend","setEend","$","click","this","parent","index","current","next","eq","addClass","show","animate","opacity","duration","complete","prev","removeClass","api","ky","create","prefixUrl","get_log","get","post","put","deleteWithPayload","payload","delete","Login","username","setUsername","password","setPassword","correct","setCorrect","background","src","logo","alt","borderColor","disabled","Landing","EndExperiment","OnBoardingInstructions","fontSize","CalendarWithContextForm","redirect_url","CalendarWithReflectForm","TimeOfDay","useHistory","paddingTop","transform","RedirectWithPrompt","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","ExperimentersLogPage","selectedRows","setSelectedRows","useQuery","isLoading","isError","maxWidth","columns","field","icons","selection","maxBodyHeight","paging","headerStyle","onSelectionChange","rowData","headers","filename","App","showAddTask","setShowAddTask","setTasks","fullDate","setFullDate","userid","setUserid","updatedTaskID","setUpdatedTaskID","setRedirectToNextPage","getTasks","fetchTasks","tasksFromServer","queryClient","QueryClient","addTask","deleteTask","task_to_delete","updateTaskIDAndRedirect","updateTask","taskToToggle","updTask","companyOther","locationOther","locationType","companyType","updateReflectedTask","formatDateToString","ret_str","appendZeroIfNecessary","parseInt","getHours","getMinutes","getSeconds","input_str","updateDroppedTask","new_start","new_end","task_id","updateTaskTime","toggleRedirect","updateDiaryDate","dateStr","updateStartTimeEndTime","checkAllTasksHaveContext","checkAllDays","taska","taskb","taskc","toggleReminder","doBoth","addTaskPopup","client","path","exact","render","event_length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM"],"mappings":"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","file":"static/js/main.f0281a93.chunk.js","sourcesContent":["import { createBrowserHistory as history } from 'history';\n\nexport default history();\n","import PropTypes from 'prop-types';\n\nconst Button = ({ color, text, onClick }) => {\n  return (\n    <button onClick={onClick} style={{ backgroundColor: color }} className=\"btn\">\n      {text}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  color: 'steelblue'\n};\n\nButton.propTypes = {\n  text: PropTypes.string,\n  color: PropTypes.string,\n  onClick: PropTypes.func\n};\n\nexport default Button;\n","import PropTypes from 'prop-types';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Button from './Button';\r\nimport '@fontsource/arya';\r\n\r\nconst Header = ({ title, onAdd, showAdd }) => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <header\r\n      className=\"header\"\r\n      style={{\r\n        marginBottom: window.location.pathname == \"/login\" ? '0' : '5%',\r\n        marginLeft: '0px',\r\n        marginTop: '0px',\r\n        backgroundColor: '#e9f5fd'\r\n      }}\r\n    >\r\n      <h1\r\n        style={{\r\n          marginBottom: '7px',\r\n          marginLeft: '2%',\r\n          marginTop: '7px',\r\n          fontFamily: 'Arya',\r\n          fontWeight: '450'\r\n        }}\r\n      >\r\n        {title}\r\n      </h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  title: 'C.W. DIARY'\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\n// CSS in JS\r\n// const headingStyle = {\r\n//   color: 'red',\r\n//   backgroundColor: 'black',\r\n// }\r\n\r\nexport default Header;\r\n","import { FaTimes, FaLongArrowAltRight } from 'react-icons/fa';\nimport { Checkmark } from 'react-checkmark';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Task = ({ task, onDelete, onToggle }) => {\n  return (\n    <div className={'taskList'}>\n      {task.reminder ? <Checkmark size=\"large\" className={'taskMark'} /> : ''}\n      <div\n        className={`task ${task.reminder && 'reminder'}`}\n        onDoubleClick={() => onToggle(task.id)}\n      >\n        <h3>\n          {task.title} <FaLongArrowAltRight></FaLongArrowAltRight>\n        </h3>\n        {/*<p>{task.start}</p>*/}\n      </div>\n    </div>\n  );\n};\n\nexport default Task;\n","import FullCalendar, { DayCellRoot } from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport Alert from 'sweetalert2';\r\nimport swalWithBootstrapButtons from 'sweetalert2';\r\nimport Swal from 'sweetalert2';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  fcday: {\r\n    backgroundColor: '#e8e8e8'\r\n  }\r\n}));\r\n\r\nfunction CalendarWithEditTime({ events, timeOfDay, date, onDrop, onDelete, onEdit }) {\r\n  const classes = useStyles();\r\n  if (timeOfDay === 'Morning') {\r\n    var minTime = '06:00:00';\r\n    var maxTime = '12:00:00';\r\n  } else if (timeOfDay == 'Afternoon') {\r\n    var minTime = '12:00:00';\r\n    var maxTime = '17:00:00';\r\n  } else if (timeOfDay == 'Evening') {\r\n    var minTime = '17:00:00';\r\n    var maxTime = '24:00:00';\r\n  } else {\r\n    var minTime = '00:00:00';\r\n    var maxTime = '24:00:00';\r\n  }\r\n  if (date == undefined || date.length === 0) {\r\n    var today = new Date().toISOString().slice(0, 10);\r\n  } else {\r\n    var today = date.substring(0, date.length - 1);\r\n  }\r\n\r\n  const eventClick = (info) => {\r\n    Alert.fire({\r\n      title: info.event.title,\r\n      html:\r\n        `<div class=\"table-responsive\">\r\n        <table class=\"table\">\r\n        <tbody>\r\n        <tr >\r\n        <tr >\r\n        <td>Start Time:</td>\r\n        <td><strong>\r\n        ` +\r\n        info.event.start.toISOString().slice(11, 16) +\r\n        `\r\n        </strong></td>\r\n        </tr>\r\n        </tbody>\r\n        </table>\r\n        </div>` +\r\n        `<input id=\"swal-input1\" class=\"swal2-input\" placeholder=\"New Start Time\">` +\r\n        `<input id=\"swal-input2\" class=\"swal2-input\" placeholder=\"New End Time\">`,\r\n      showCancelButton: true,\r\n      showDenyButton: true,\r\n      cancelButtonColor: '#3085d6',\r\n      confirmButtonText: 'Save',\r\n      cancelButtonText: 'Close',\r\n      denyButtonText: 'Remove Event',\r\n      preConfirm: function () {\r\n        return new Promise(function (resolve) {\r\n          if (true) {\r\n            resolve([\r\n              document.getElementById('swal-input1').value,\r\n              document.getElementById('swal-input2').value\r\n            ]);\r\n          }\r\n        });\r\n      }\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        Alert.fire('Success!', 'Your edit is saved', 'success');\r\n        onEdit((info.event.id), result.value[0], result.value[1]);\r\n      }\r\n      if (result.isDenied) {\r\n        Alert.fire({\r\n          title: 'Are you sure?',\r\n          text: \"You won't be able to revert this!\",\r\n          icon: 'warning',\r\n          showCancelButton: true,\r\n          confirmButtonText: 'Yes, delete it!',\r\n          cancelButtonText: 'No, cancel!',\r\n          reverseButtons: true\r\n        }).then((result) => {\r\n          if (result.isConfirmed) {\r\n            info.event.remove(); // It will remove event from the calendar\r\n            onDelete((info.event.id));\r\n            swalWithBootstrapButtons.fire('Deleted!', 'This event has been deleted.', 'success');\r\n          } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n            swalWithBootstrapButtons.fire('Cancelled', 'This event is safe :)', 'error');\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"App\" class=\"calendar\">\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n        initialView=\"timeGridDay\"\r\n        events={events}\r\n        eventColor=\"white\"\r\n        slotMinTime={minTime}\r\n        slotMaxTime={maxTime}\r\n        editable={true}\r\n        expandRows={true}\r\n        eventDrop={onDrop}\r\n        eventResize={onDrop}\r\n        eventTextColor=\"black\"\r\n        initialDate={today}\r\n        eventClick={eventClick}\r\n        eventDurationEditable={true}\r\n        headerToolbar={false}\r\n        height=\"700px\"\r\n        dayCellClassNames={classes.fcday}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CalendarWithEditTime;\r\n","import {\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ReferenceLine,\n  LabelList,\n  Label\n} from 'recharts';\n\nconst getAveragePerActivity = (tasks) => {\n  let averages_per_activity = {};\n  for (let task of tasks) {\n    if (task['activityType'] === undefined || task['activityType'].length === 0) {\n      continue;\n    }\n    for (let activity of task['activityType']) {\n      let value = activity['value'];\n      if (!(value in averages_per_activity)) {\n        averages_per_activity[value] = {\n          count: 0,\n          cognitiveConsumption: 0,\n          cognitiveRegeneration: 0\n        };\n      }\n      averages_per_activity[value]['count'] += 1;\n      averages_per_activity[value]['cognitiveConsumption'] += task['cognitiveConsumption'];\n      averages_per_activity[value]['cognitiveRegeneration'] += task['cognitiveRegeneration'];\n    }\n  }\n  let ret = [];\n  for (let activity in averages_per_activity) {\n    let average = {\n      cognitiveConsumption:\n        averages_per_activity[activity]['cognitiveConsumption'] /\n        averages_per_activity[activity]['count'],\n      cognitiveRegeneration:\n        averages_per_activity[activity]['cognitiveRegeneration'] /\n        averages_per_activity[activity]['count'],\n      activityType: activity\n    };\n    ret.push(average);\n  }\n  return ret;\n};\n\nexport default function Chart({ tasks }) {\n  return (\n    <div class=\"input-forms\">\n      <ScatterChart\n        width={1200}\n        height={800}\n        margin={{\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 20\n        }}\n      >\n        <XAxis\n          type=\"number\"\n          dataKey=\"cognitiveConsumption\"\n          name=\"consumption\"\n          domain={[-100, 100]}\n          hide={true}\n        ></XAxis>\n        <YAxis\n          type=\"number\"\n          dataKey=\"cognitiveRegeneration\"\n          name=\"regeneration\"\n          domain={[-100, 100]}\n          hide={true}\n        ></YAxis>\n        <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n        <ReferenceLine y={0}>\n          <Label value=\"Very cognitively consuming\" position=\"insideRight\" />\n          <Label value=\"Not cognitively consuming\" position=\"insideLeft\" />\n        </ReferenceLine>\n        <ReferenceLine x={0}>\n          <Label value=\"Very cognitively regenerating\" position=\"insideTop\" />\n          <Label value=\"Not cognitively regenerating\" position=\"insideBottom\" />\n        </ReferenceLine>\n        <Scatter\n          name=\"Cognitive Consumption and Regeneration for Tasks\"\n          data={getAveragePerActivity(tasks)}\n          fill=\"#8884D8\"\n        >\n          <LabelList dataKey=\"activityType\" position=\"top\" />\n        </Scatter>\n      </ScatterChart>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useState } from 'react';\n\nconst Instruction = ({ isInstruction, setInstruction }) => {\n  const handleInstructionClick = () => {\n    setInstruction((isInstruction) => !isInstruction);\n  };\n\n  return (\n    <div className={`${isInstruction ? 'active' : ''} show`}>\n      <div className=\"pop-form\">\n        <div className=\"form-box solid\">\n          <form>\n            <h1 className=\"pop-text\">Instruction</h1>\n            <br></br>\n            <label>Instruction Placeholders </label>\n            <br></br>\n            <br></br>\n            <label>\n              {' '}\n              Two households, both alike in dignity, In fair Verona, where we lay our scene, From\n              ancient grudge break to new mutiny, Where civil blood makes civil hands unclean. From\n              forth the fatal loins of these two foes A pair of star-cross'd lovers take their life;\n              Whose misadventured piteous overthrows Do with their death bury their parents' strife.\n              The fearful passage of their death-mark'd love, And the continuance of their parents'\n              rage, Which, but their children's end, nought could remove, Is now the two hours'\n              traffic of our stage; The which if you with patient ears attend, What here shall miss,\n              our toil shall strive to mend.\n            </label>\n            <br></br>\n            <br></br>\n            <br></br>\n            <input type=\"button\" value=\"OK\" className=\"pop-btn\" onClick={handleInstructionClick} />\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Instruction;\n","import { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Select from 'react-select';\nimport Instruction from './Instruction';\nimport TimePicker from 'react-weblineindia-time-picker';\n\nconst intToWeekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nconst intToMonth = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n];\n\nconst getValue = (input_date) => {\n  let date = input_date.getDate() >= 10 ? input_date.getDate() : '0' + input_date.getDate();\n  let month =\n    input_date.getMonth() >= 10 ? input_date.getMonth() + 1 : '0' + (input_date.getMonth() + 1);\n  return input_date.getFullYear() + '-' + month + '-' + date + 'T';\n};\n\nconst getLabel = (input_date) => {\n  let date = input_date.getDate() >= 10 ? input_date.getDate() : '0' + input_date.getDate();\n  let month = intToMonth[input_date.getMonth()];\n  return (\n    intToWeekday[input_date.getDay()] + ', ' + month + ' ' + date + ' ' + input_date.getFullYear()\n  );\n};\n\nconst generateLastWeek = () => {\n  let lastWeekDate = [];\n  let curr_day = new Date();\n  curr_day.setDate(curr_day.getDate() - 1);\n  for (let i = 0; i < 7; i++) {\n    lastWeekDate.push({ value: getValue(curr_day), label: getLabel(curr_day) });\n    curr_day.setDate(curr_day.getDate() - 1);\n  }\n  return lastWeekDate;\n};\n\nconst SelectDate = ({ onUpdate }) => {\n  const [redirectToNextPage, setRedirect] = useState(false);\n  const [selectedOption, setSelectedOption] = useState('');\n  const [isInstruction, setIsInstruction] = useState(true);\n  const handleInstructionClick = () => {\n    setIsInstruction((isInstruction) => !isInstruction);\n  };\n\n  const options = generateLastWeek();\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    if (!selectedOption) {\n      alert('Please choose a day');\n      return;\n    }\n    if (\n      !document.getElementById('wakeUpTime').value ||\n      !document.getElementById('sleepTime').value\n    ) {\n      alert('Please fill both start and end times');\n      return;\n    }\n    onUpdate(\n      selectedOption.value,\n      selectedOption.label,\n      document.getElementById('wakeUpTime').value,\n      document.getElementById('sleepTime').value\n    );\n    setRedirect(true);\n  };\n  if (redirectToNextPage) {\n    return <Redirect to=\"/timeofday\" />;\n  } else {\n    return (\n      <div>\n        <h1 class=\"heading-center\"> YESTERDAY </h1>\n        <div class=\"input-forms\">\n          <form className=\"add-form\" onSubmit={onSubmit}>\n            <div className=\"form-control\">\n              <label>Please choose the day of the week that YESTERDAY was:</label>\n              <Select\n                isMulti={false}\n                name=\"activity\"\n                options={options}\n                className=\"multi-select\"\n                classNamePrefix=\"select\"\n                value={selectedOption}\n                onChange={(e) => setSelectedOption(e)}\n              >\n                {options.map((o) => (\n                  <option key={o.value} value={o.value}>\n                    {o.label}\n                  </option>\n                ))}\n                style={{ width: '20%' }}\n              </Select>\n              <label style={{ marginTop: '40px', marginBottom: '10px' }}>\n                About what time did you wake up yesterday?\n              </label>\n              <div>\n                <input id=\"wakeUpTime\" type=\"time\" name=\"eventEnd\" class=\"swal2-input\" required />\n              </div>\n              <label style={{ marginTop: '40px', marginBottom: '10px' }}>\n                About when did you go to sleep yesterday?\n              </label>\n              <div>\n                <input id=\"sleepTime\" type=\"time\" name=\"eventEnd\" class=\"swal2-input\" required />\n              </div>\n            </div>\n            <input type=\"submit\" value=\"Next\" className=\"btn btn-block\" action=\"/daystartendtime\" />\n          </form>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default SelectDate;\n","import React, { useState } from \"react\";\r\nimport { Collapse } from 'react-collapse';\r\n\r\nconst SubformBox = (props) => {\r\n\r\n\tconst [ isOpen, setIsOpen ] = useState(true);\r\n\r\n\tconsole.log(props.children);\r\n\r\n\treturn (\r\n\t\t<div className=\"subform-box\">\r\n\t\t<div style={{\r\n\t\t\tdisplay: \"flex\",\r\n\t\t\tflexDirection: \"column\",\r\n\t\t\ttextAlign: \"left\",\r\n\t\t\tmargin: \"1rem auto\",\r\n\t\t\tjustifyContent: \"space-between\"\r\n\t\t}}>\r\n\t\t\t<h3>{props.header}</h3>\r\n\t\t\t<div className=\"subform-box-bar\" style={{\r\n\t\t\t\tdisplay: \"flex\"\r\n\t\t\t}}>\r\n\t\t\t\t{props.children.map((child, i) => {\r\n\t\t\t\t\tif (!child.props.checked) return null;\r\n\t\t\t\t\treturn (<div className=\"subform-tag\" key={\"subform-tag-\" + i}>\r\n\t\t\t\t\t\t\t{child.props.value}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t})}\r\n\t\t\t\t<input type=\"checkbox\" checked={isOpen} onChange={(e) => setIsOpen(e.target.checked)}\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\twidth: \"auto\",\r\n\t\t\t\t\talignSelf: \"end\",\r\n\t\t\t\t\tmarginLeft: \"auto\"\r\n\t\t\t\t}}></input>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<Collapse isOpened={isOpen}>\r\n\t\t\t<div className=\"subform-box-options\" \r\n\t\t\tstyle={{\r\n\t\t\t\tborder: \"3px solid lightgray\",\r\n\t\t\t\tpadding: \"20px\"\r\n\t\t\t}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t</Collapse>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SubformBox;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport Slider from 'rc-slider';\r\nimport { Redirect } from 'react-router-dom';\r\nimport SubformBox from './SubformBox';\r\n\r\n\r\nconst ContextForm = ({ taskID, onAdd, updateRedirect, fetchTask }) => {\r\n  const activityOptions = [\r\n    { value: 'Work', label: 'Work', suboptions: [\"Reading\", \"Writing\", \"Brainstorming\", \"Creativity Task\", \"Planning\", \"Programming\", \"Email Reply\", \"Business Call\", \"Meeting\", \"Research Work\", \"Other\"]},\r\n    { value: 'School', label: 'School', suboptions: [\"Reading\", \"Writing\", \"Planning\", \"Meeting\", \"Homework\", \"Class Work\", \"Teaching\", \"Other\"]},\r\n    { value: 'Housework', label: 'Housework', suboptions: [\"Cleaning\", \"Organizing\", \"Laundry\", \"Dish Washing\", \"Ironing\", \"House Repair\", \"Errands\", \"Grocery Shopping\", \"Other\"]},\r\n    { value: 'Social Activities', label: 'Social Activities',suboptions: [\"Spending time with my family\", \"Spending time with my friends\", \"Going out with my family/friends\", \"Playing sports with my friends\", \"Volunteer\", \"Caring for a family member\", \"Writing to a loved one\", \"Talking on the phone or by video to a loved one\", \"Spending time with a beloved pet\", \"Romantic date\", \"Sex\"] },\r\n    { value: 'Fun/Leisure', label: 'Fun/Leisure', suboptions: [\"Entertainment\", \"Culture\", \"Concerts\", \"Dancing\", \"Video games\", \"Watch TV\", \"Reading\", \"Gardening\", \"Craft\", \"Painting\", \"Listening to music\", \"Hobby / pursuing active interest\", \"Other\"]},\r\n    { value: 'Nutrition', label: 'Nutrition', suboptions: [\"Eating\", \"Coffee\", \"Drinking water\", \"Other\"]},\r\n    { value: 'Physical Activity', label: 'Physical Activity', suboptions: [\"Walk\", \"Run\", \"Dance\", \"Soccer\", \"Football\", \"Basketball\", \"Jog\", \"Yoga\", \"Fitness\", \"Tennis\", \"Hockey\", \"Ski\", \"Golf\", \"Bicycling\", \"Other\"]},\r\n    { value: 'Self Care', label: 'Self Care', suboptions: [\"Sleep/Nap\", \"Cooking/preparing meals\", \"Pray, meditate, breathing exercises\", \"Learning & self improvement\", \"Dressing up & getting ready\", \"Personal hygiene (eg. bathing, grooming, restroom, etc.)\", \"Doctor appointment\", \"Spa/Massage\", \"Other\"]},\r\n    { value: 'Miscellanous', label: 'Miscellanous', suboptions: [\"Public transportation\", \"Driving\", \"Shopping\", \"Free time\", \"Other\"]}\r\n  ];\r\n\r\n  const locationOptions = [\r\n    { value: 'Home', label: 'Home' },\r\n    { value: 'Public Hall', label: 'Public Hall' },\r\n    { value: 'Shop', label: 'Shop' },\r\n    { value: 'School', label: 'School' },\r\n    { value: 'Work place', label: 'Work place' },\r\n    { value: 'Business trip destination', label: 'Business trip destination' },\r\n    { value: 'Second Home', label: 'Second Home' },\r\n    { value: 'Hospital', label: 'Hospital' },\r\n    { value: \"Other People's Home\", label: \"Other People's Home\" },\r\n    { value: 'Travelling by Car', label: 'Travelling by Car' },\r\n    { value: 'Travelling by Foot', label: 'Travelling by Foot' },\r\n    { value: 'Other', label: 'Other' },\r\n    { value: 'Sports Arena', label: 'Sports Arena' },\r\n  ];\r\n\r\n  const companyOptions = [\r\n    { value: 'Children (Under 10)', label: 'Children (Under 10)' },\r\n    { value: 'Family in Other Households', label: 'Family in Other Households' },\r\n    { value: 'Other Households members', label: 'Other Households members' },\r\n    { value: 'Alone', label: 'Alone' },\r\n    { value: 'Friends', label: 'Friends' },\r\n    { value: 'Colleagues', label: 'Colleagues' },\r\n    { value: 'Other', label: 'Other' }\r\n  ];\r\n\r\n  const [location, setLocation] = useState('');\r\n  const [company, setCompany] = useState('');\r\n  const [cognitiveConsumption, setCognitiveConsumption] = useState(0);\r\n  const [cognitiveRegeneration, setCognitiveRegeneration] = useState(0);\r\n  const [selectedActivityOption, setSelectedActivityOption] = useState([]);\r\n  const [selectedActivitySuboptions, setSelectedActivitySuboptions] = useState([]);\r\n  const [selectedLocationOption, setSelectedLocationOption] = useState(\"\");\r\n  const [selectedCompanyOption, setSelectedCompanyOption] = useState([]);\r\n  const [companySelected, setCompanySelected] = useState(null);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [activityName, setActivityName] = useState('');\r\n  const [start, setStart] = useState('');\r\n  const [end, setEnd] = useState('');\r\n  const [warning, setWarning] = useState('');\r\n\r\n  const marks = {\r\n    '-100': 'None',\r\n    100: 'Tons'\r\n  };\r\n\r\n\r\n  // console.log(taskID);\r\n  // fetchTask(taskID).then((data) => {\r\n  //   setActivityName(data['title']);\r\n  //   setStart(data['start'].substring(11));\r\n  //   setEnd(data['end'].substring(11));\r\n  // });\r\n  // console.log(activityName);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (selectedActivityOption.length == 0) {\r\n      setWarning('Warning: Please select at least one activity type');\r\n      return;\r\n    }\r\n    if (selectedLocationOption.length == 0) {\r\n      setWarning('Warning: Please select at least one location type');\r\n      return;\r\n    }\r\n    if (selectedCompanyOption.length == 0) {\r\n      setWarning('Warning: Please select at least one company type');\r\n      return;\r\n    }\r\n    // choose the update method here\r\n    onAdd(\r\n      location,\r\n      company,\r\n      cognitiveConsumption,\r\n      cognitiveRegeneration,\r\n      selectedActivityOption,\r\n      selectedLocationOption,\r\n      selectedCompanyOption\r\n    );\r\n    updateRedirect();\r\n\r\n    setLocation('');\r\n    setCompany('');\r\n    setCognitiveConsumption(0);\r\n    setCognitiveRegeneration(0);\r\n    setSelectedActivityOption([]);\r\n    setSelectedLocationOption([]);\r\n    setSelectedCompanyOption([]);\r\n    setRedirect(true);\r\n    setWarning('');\r\n  };\r\n  if (redirect) {\r\n    return <Redirect to=\"/context\" />;\r\n  }\r\n\r\n  let otherLocationInput = selectedLocationOption == \"Other\" ?\r\n    <input\r\n      type=\"text\"\r\n      name=\"location\"\r\n      placeholder=\"Please specify your activity location type here\"\r\n      value={location}\r\n      onChange={(e) => setLocation(e.target.value)}\r\n      style={{\r\n        width: \"60%\"\r\n      }}\r\n    /> : null;\r\n\r\n  const quantityBox = (subopt) => {\r\n    return selectedCompanyOption.find(x => x.value == subopt.value) ? (\r\n      <div style={{\r\n        display: \"flex\",\r\n        justifySelf: \"end\",\r\n        marginLeft: \"auto\",\r\n        padding: 0\r\n      }}>\r\n        How many? \r\n        <button\r\n          onClick={() => {\r\n            let option = selectedCompanyOption.find(x => x.value == subopt.value); \r\n            let newQuantity = option.quantity > 1 ? option.quantity - 1 : 0;\r\n            let newOpt = {\r\n              value: subopt.value,\r\n              quantity: newQuantity\r\n            }\r\n            let newSelected = [...selectedCompanyOption].filter(x => x.value != subopt.value);\r\n            newSelected.push(newOpt);\r\n            setSelectedCompanyOption(newSelected);\r\n          }}\r\n        >-</button>\r\n                  {selectedCompanyOption.find(x => x.value == subopt.value) ? selectedCompanyOption.find(x => x.value == subopt.value).quantity : 0}\r\n          <button\r\n          onClick={() => {\r\n            let option = selectedCompanyOption.find(x => x.value == subopt.value); \r\n            let newQuantity = option.quantity + 1;\r\n            let newOpt = {\r\n              value: subopt.value,\r\n              quantity: newQuantity\r\n            }\r\n            let newSelected = [...selectedCompanyOption].filter(x => x.value != subopt.value);\r\n            newSelected.push(newOpt);\r\n            setSelectedCompanyOption(newSelected);\r\n          }}\r\n        >+</button>\r\n      </div>\r\n    ) : null;\r\n  }\r\n  \r\n  let companySelectInput = companySelected == \"Yes\" ? \r\n    <SubformBox key=\"company-subform\" header={null}>\r\n      {companyOptions.map((subopt, j) => {\r\n        return (<div className=\"checkbox-group\" key={\"checkbox-group-\" + j} checked={selectedCompanyOption.includes(x => x.value == subopt.value)} value={subopt.value} style={{\r\n          display: \"flex\",\r\n          alignItems: \"baseline\",\r\n          width: \"100%\"\r\n        }}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              value={subopt.value}\r\n              id={subopt.value}\r\n              checked={selectedCompanyOption.find(x => x.value == subopt.value) ? true : false}\r\n              style={{\r\n                width: \"auto\"\r\n              }}\r\n              onChange={(e) => e.target.checked ? \r\n                setSelectedCompanyOption([...selectedCompanyOption, {value: e.target.value, quantity: 1} ]) :\r\n                setSelectedCompanyOption(selectedCompanyOption.filter(su => su.value != e.target.value))\r\n              }>\r\n            \r\n            </input>\r\n          <label className='form-check-label' htmlFor={subopt.value} style={{ width: \"auto\"}}>{subopt.label}</label>\r\n          {quantityBox(subopt)}\r\n        </div>\r\n      )})}\r\n    </SubformBox> : null;\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {/* <h1 style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n        {' '}\r\n        {activityName}{' '}\r\n      </h1>\r\n      <h4 style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n        {' '}\r\n        {start} : {end}{' '}\r\n      </h4> */}\r\n      <div className=\"col-md-8 col-md-offset-4\">\r\n        <form id=\"msform\" onSubmit={onSubmit}>\r\n          <fieldset>\r\n            <h1 className=\"fs-title\">Add Event Information</h1>\r\n            <h3 className=\"fs-subtitle\" style={{\r\n              \"fontSize\": \"25px\",\r\n              \"marginBottom\": \"0\",\r\n            }}>\r\n              {activityName ? activityName : \"Default Activity\"}\r\n            </h3>\r\n            <h3 className=\"fs-subtitle\">{start ? start : \"10:00 AM\"} - {end ? end : \"01:00 PM\"}</h3>\r\n            <h2 className=\"fs-title section-header\">Event Type</h2>\r\n            <div className='form-check form-group'>\r\n              {activityOptions.map((opt,i) => {\r\n                return (\r\n                  <div className=\"checkbox-group\" key={\"checkbox-group-\" + i} checked={selectedActivityOption.includes(opt.value)}>\r\n                    <input \r\n                      className='form-check-input' \r\n                      type=\"checkbox\" \r\n                      value={opt.value} \r\n                      id={opt.value} \r\n                      checked={selectedActivityOption.includes(opt.value)}\r\n                      onChange={(e) => e.target.checked ? \r\n                        setSelectedActivityOption([...selectedActivityOption, e.target.value]) : \r\n                        setSelectedActivityOption(selectedActivityOption.filter(opt => opt != e.target.value))\r\n                      }\r\n                      style={{\r\n                        width: \"auto\"\r\n                      }}>\r\n                    </input>\r\n                    <label className='form-check-label' htmlFor={opt.value}>{opt.label}</label>\r\n                  </div>);\r\n              })}\r\n            </div>\r\n            {selectedActivityOption.length > 0 ? \"Choose tags to provide more details on the activities you indicated you were doing\" : \"\"}\r\n            {selectedActivityOption.map((opt, i) => {\r\n              return (<SubformBox key={\"activity-subform-\" + i} header={opt}>\r\n                {activityOptions.find(x => x.value == opt).suboptions.map((subopt, j) => {\r\n                  return (<div className=\"checkbox-group\" key={\"checkbox-group-\" + j} checked={selectedActivitySuboptions.includes(subopt)} value={subopt}>\r\n                    <input\r\n                      className=\"form-check-input\"\r\n                      type=\"checkbox\"\r\n                      value={subopt}\r\n                      id={subopt}\r\n                      checked={selectedActivitySuboptions.includes(subopt)}\r\n                      style={{\r\n                        width: \"auto\"\r\n                      }}\r\n                      onChange={(e) => e.target.checked ? \r\n                        setSelectedActivitySuboptions([...selectedActivitySuboptions, e.target.value]) :\r\n                        setSelectedActivitySuboptions(selectedActivitySuboptions.filter(su => su != e.target.value))\r\n                      }>\r\n                    \r\n                    </input>\r\n                    <label className='form-check-label' htmlFor={subopt}>{subopt}</label>\r\n                  </div>);\r\n                })}\r\n              </SubformBox>);\r\n            })}\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h2 className=\"fs-title section-header\">Location</h2>\r\n            <div className='form-check form-group'>\r\n              {locationOptions.map((opt, i) => {\r\n                return (\r\n                  <div className=\"checkbox-group\" key={\"checkbox-group-\" + i}>\r\n                    <input \r\n                      className='form-check-input' \r\n                      type=\"radio\" value={opt.value} \r\n                      id={opt.value} \r\n                      name=\"location-group\" \r\n                      selected={selectedLocationOption === opt.value}\r\n                      onChange={(e) => setSelectedLocationOption(e.target.value)}\r\n                      style={{\r\n                        width: \"auto\"\r\n                      }}>\r\n                    </input>\r\n                    <label className='form-check-label' htmlFor={opt.value}>{opt.label}</label>\r\n                  </div>);\r\n              })}\r\n            </div>\r\n            <br></br>\r\n            <br></br>\r\n            {otherLocationInput}\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h2 className=\"fs-title section-header\">Company</h2>\r\n            <br></br>\r\n            <br></br>\r\n            Were you interacting with anyone?\r\n            <div style={{\r\n              width: \"80%\",\r\n              margin: \"auto\",\r\n              display: \"flex\"\r\n            }}>\r\n              <div className=\"checkbox-group\" style={{ marginRight: \"20px\" }}>\r\n                <input className=\"form-check-input\" type=\"radio\" name=\"company-group\" value=\"Yes\" style={{ width: \"auto\" }} selected={companySelected==\"Yes\"} onChange={() => setCompanySelected(\"Yes\")}/>\r\n                <label className=\"form-check-label\" htmlFor=\"company-group\">Yes</label>\r\n              </div>\r\n              <div className='checkbox-group'>\r\n                <input className=\"form-check-input\" type=\"radio\" name=\"company-group\" value=\"No\" style={{ width: \"auto\" }} selected={companySelected==\"No\"} onChange={() => setCompanySelected(\"No\")}/>\r\n                <label className=\"form-check-label\" htmlFor=\"company-group\">No</label>\r\n              </div>\r\n            </div>\r\n            {companySelectInput}\r\n            {/* <input\r\n              type=\"text\"\r\n              name=\"company\"\r\n              placeholder=\"If you selected Other, please specify your activity company type here\"\r\n              value={company}\r\n              onChange={(e) => setCompany(e.target.value)}\r\n            /> */}\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <h2 className=\"fs-title section-header\">Cognitive Workload</h2>\r\n            <label>Cognitive Consumption</label>\r\n            <div className='form-slider'>\r\n              <Slider\r\n                min={-100}\r\n                max={100}\r\n                marks={marks}\r\n                value={cognitiveConsumption}\r\n                onChange={(e) => setCognitiveConsumption(e)}\r\n                tipFormatter={value => `${value}%`}\r\n              />\r\n            </div>\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            <label>Cognitive Regeneration</label>\r\n            <div className='form-slider'>\r\n              <Slider\r\n                dots\r\n                min={-100}\r\n                step={20}\r\n                max={100}\r\n                value={cognitiveRegeneration}\r\n                onChange={(e) => setCognitiveRegeneration(e)}\r\n                tipFormatter={value => `${value}%`}\r\n              />\r\n            </div>\r\n            <br></br>\r\n            <br></br>\r\n            {/* <h2 className=\"fs-title\">Summary</h2>\r\n            <h3 className=\"fs-subtitle\">Please confirm the summary of activity: {activityName}</h3>\r\n            <h4 className=\"fs-subtitle\">\r\n              {' '}\r\n              The activity type(s) is:\r\n              {selectedActivityOption.map((o) => (\r\n                <option key={o.value} value={o.value}>\r\n                  {o.label}\r\n                </option>\r\n              ))}\r\n            </h4>\r\n            <h5 className=\"fs-subtitle\">\r\n              {' '}\r\n              The location type(s) is:\r\n              {selectedLocationOption.map((o) => (\r\n                <option key={o.value} value={o.value}>\r\n                  {o.label}\r\n                </option>\r\n              ))}\r\n            </h5>\r\n            <h5 className=\"fs-subtitle\">\r\n              {' '}\r\n              The activity's company type(s) is:\r\n              {selectedCompanyOption.map((o) => (\r\n                <option key={o.value} value={o.value}>\r\n                  {o.label}\r\n                </option>\r\n              ))}\r\n            </h5>\r\n            <h5 className=\"fs-subtitle\">\r\n              {' '}\r\n              The cognitive consumption (-100 ~ 100) is: {cognitiveConsumption}{' '}\r\n            </h5>\r\n            <h5 className=\"fs-subtitle\">\r\n              {' '}\r\n              The cognitive regeneration (-100 ~ 100) is: {cognitiveRegeneration}{' '}\r\n            </h5>\r\n            <br></br> */}\r\n            <h4 className=\"submit-warning\"> {warning} </h4>\r\n            <br></br>\r\n            <input type=\"submit\" name=\"submit\" className=\"submit action-button\" value=\"Submit\" />\r\n          </fieldset>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContextForm;\r\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\nimport Slider from 'rc-slider';\nimport { Redirect } from 'react-router-dom';\n\n//export default function App() {\n\nconst ReflectForm = ({ taskID, onAdd, updateRedirect }) => {\n  const activityOptions = [\n    { value: 'School/Work', label: 'School/Work' },\n    { value: 'Love/Social', label: 'Love/Social' },\n    { value: 'Physical', label: 'Physical' },\n    { value: 'Nutrition', label: 'Nutrition' },\n    { value: 'Housework', label: 'Housework' },\n    { value: 'Fun/Leisure', label: 'Fun/Leisure' },\n    { value: 'Miscellanous', label: 'Miscellanous' }\n  ];\n\n  const locationOptions = [\n    { value: 'Home', label: 'Home' },\n    { value: 'School', label: 'School' },\n    { value: 'Second Home', label: 'Second Home' },\n    { value: \"Other People's Home\", label: \"Other People's Home\" },\n    { value: 'Sports Arena', label: 'Sports Arena' },\n    { value: 'Working Place', label: 'Working Place' },\n    { value: 'Hospital', label: 'Hospital' },\n    { value: 'Other', label: 'Other' }\n  ];\n\n  const companyOptions = [\n    { value: 'Children (Under 10)', label: 'Children (Under 10)' },\n    { value: 'Family in Other Households', label: 'Family in Other Households' },\n    { value: 'Other Households members', label: 'Other Households members' },\n    { value: 'Alone', label: 'Alone' },\n    { value: 'Friends', label: 'Friends' },\n    { value: 'Colleagues', label: 'Colleagues' },\n    { value: 'Other', label: 'Other' }\n  ];\n\n  const [location, setLocation] = useState('');\n  const [company, setCompany] = useState('');\n  const [cognitiveConsumption, setCognitiveConsumption] = useState(0);\n  const [cognitiveRegeneration, setCognitiveRegeneration] = useState(0);\n  const [selectedActivityOption, setSelectedActivityOption] = useState([]);\n  const [selectedLocationOptionField, setSelectedLocationOptionField] = useState([]);\n  const [selectedCompanyOptionField, setSelectedCompanyOptionField] = useState([]);\n  const [companyNumberField, setCompanyNumberField] = useState(0);\n  const [startField, setStartField] = useState('');\n  const [endField, setEndField] = useState('');\n  const [redirect, setRedirect] = useState(false);\n  const [activityName, setActivityName] = useState('');\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [warning, setWarning] = useState('');\n  const [date, setDate] = useState('');\n\n  const marks = {\n    '-100': 'None',\n    100: 'Tons'\n  };\n\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n    return data;\n  };\n\n  console.log(taskID);\n\n  useEffect(() => {\n    const getTask = async () => {\n      fetchTask(taskID).then((data) => {\n        setActivityName(data['title']);\n        setStart(data['start'].substring(11));\n        setEnd(data['end'].substring(11));\n        setDate(data['start'].substring(0, 11));\n        setCognitiveConsumption(data['cognitiveConsumption']);\n        setCognitiveRegeneration(data['cognitiveRegeneration']);\n        setSelectedActivityOption(data['activityType']);\n      });\n    };\n    getTask();\n  }, []);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (startField === '') {\n      setWarning('Warning: Please enter a start time');\n      return;\n    }\n    if (endField === '') {\n      setWarning('Warning: Please enter an end time');\n      return;\n    }\n    if (selectedLocationOptionField.length === 0) {\n      setWarning('Warning: Please select at least one location type');\n      return;\n    }\n    if (selectedCompanyOptionField.length === 0) {\n      setWarning('Warning: Please select at least one company type');\n      return;\n    }\n    // choose the update method here\n    onAdd(\n      location,\n      company,\n      selectedLocationOptionField,\n      selectedCompanyOptionField,\n      companyNumberField,\n      date + startField,\n      date + endField\n    );\n    updateRedirect();\n\n    setLocation('');\n    setCompany('');\n    setSelectedLocationOptionField([]);\n    setSelectedCompanyOptionField([]);\n    setRedirect(true);\n    setWarning('');\n    setCompanyNumberField(0);\n    setStartField('');\n    setEndField('');\n  };\n  if (redirect) {\n    return <Redirect to=\"/reflect\" />;\n  }\n\n  return (\n    <div className=\"row\">\n      <h1 style={{ display: 'flex', justifyContent: 'center', alignItems: 'left' }}>\n        {' '}\n        Edit Event Infomation\n      </h1>\n      <h1 style={{ display: 'flex', justifyContent: 'center', alignItems: 'left' }}>\n        {' '}\n        {activityName}\n      </h1>\n      <h4 style={{ display: 'flex', justifyContent: 'center', alignItems: 'left' }}>\n        {' '}\n        {start} : {end}{' '}\n      </h4>\n      <h1\n        className=\"fs-subtitle\"\n        style={{ display: 'flex', justifyContent: 'center', alignItems: 'left' }}\n      >\n        {' '}\n        Activity Type:\n        {selectedActivityOption.map((o) => (\n          <option key={o.value} value={o.value}>\n            {o.label}\n          </option>\n        ))}\n      </h1>\n      <h1\n        className=\"fs-subtitle\"\n        style={{ display: 'flex', justifyContent: 'center', alignItems: 'left' }}\n      >\n        {' '}\n        Cognitive Consumption: {cognitiveConsumption}\n      </h1>\n      <h1\n        className=\"fs-subtitle\"\n        style={{ display: 'flex', justifyContent: 'center', alignItems: 'left' }}\n      >\n        {' '}\n        Cognitive Regeneration: {cognitiveRegeneration}\n      </h1>\n      <div className=\"col-md-8 col-md-offset-4\">\n        <form id=\"msform\" onSubmit={onSubmit}>\n          <fieldset>\n            <h3 className=\"fs-subtitle\">Edit Event Infomation: {activityName}</h3>\n            <h2 className=\"fs-title\">Event Time</h2>\n            <input\n              type=\"text\"\n              name=\"startTime\"\n              placeholder={start}\n              value={startField}\n              onChange={(e) => setStartField(e.target.value)}\n            />\n            <input\n              type=\"text\"\n              name=\"endTime\"\n              placeholder={end}\n              value={endField}\n              onChange={(e) => setEndField(e.target.value)}\n            />\n            <br></br>\n            <br></br>\n            <br></br>\n            <h2 className=\"fs-title\">Location</h2>\n            <ReactMultiSelectCheckboxes\n              isMulti\n              name=\"activity1\"\n              options={locationOptions}\n              className=\"multi-select\"\n              placeholderButtonLabel=\"Location Type\"\n              classNamePrefix=\"select\"\n              value={selectedLocationOptionField}\n              onChange={(e) => setSelectedLocationOptionField(e)}\n            >\n              {locationOptions.map((o) => (\n                <option key={o.value} value={o.value}>\n                  {o.label}\n                </option>\n              ))}\n            </ReactMultiSelectCheckboxes>\n            <br></br>\n            <br></br>\n            <input\n              type=\"text\"\n              name=\"location\"\n              placeholder=\"If you selected Other, please specify your activity location type here\"\n              value={location}\n              onChange={(e) => setLocation(e.target.value)}\n            />\n            <br></br>\n            <br></br>\n            <br></br>\n            <h2 className=\"fs-title\">Company</h2>\n            <ReactMultiSelectCheckboxes\n              isMulti\n              name=\"activity1\"\n              options={companyOptions}\n              className=\"multi-select\"\n              placeholderButtonLabel=\"Company Type\"\n              classNamePrefix=\"select\"\n              value={selectedCompanyOptionField}\n              onChange={(e) => setSelectedCompanyOptionField(e)}\n            >\n              {companyOptions.map((o) => (\n                <option key={o.value} value={o.value}>\n                  {o.label}\n                </option>\n              ))}\n            </ReactMultiSelectCheckboxes>\n            <br></br>\n            <br></br>\n            <input\n              type=\"text\"\n              name=\"company\"\n              placeholder=\"If you selected Other, please specify your activity company type here\"\n              value={company}\n              onChange={(e) => setCompany(e.target.value)}\n            />\n            <label>Company Number</label>\n            <input\n              type=\"text\"\n              name=\"company\"\n              placeholder=\"Your Activity Company Number\"\n              value={companyNumberField}\n              onChange={(e) => setCompanyNumberField(e.target.value)}\n            />\n            <br></br>\n            <br></br>\n            <br></br>\n            {/* <h2 className=\"fs-title\">Summary</h2>\n                        <h3 className=\"fs-subtitle\">Please confirm the summary of activity: {activityName}</h3>\n                        <h4 className=\"fs-subtitle\"> The activity type(s) is:\n                            {selectedActivityOption.map(o => (\n                                <option key={o.value} value={o.value}>{o.label}</option>\n                            ))}\n                        </h4>\n                        <h5 className=\"fs-subtitle\"> The location type(s) is: \n                            {selectedLocationOption.map(o => (\n                                <option key={o.value} value={o.value}>{o.label}</option>\n                            ))}\n                        </h5>\n                        <h5 className=\"fs-subtitle\"> The activity's company type(s) is:\n                            {selectedCompanyOption.map(o => (\n                                <option key={o.value} value={o.value}>{o.label}</option>\n                            ))}\n                        </h5>\n                        <h5 className=\"fs-subtitle\"> The cognitive consumption (-100 ~ 100) is: {cognitiveConsumption} </h5>\n                        <h5 className=\"fs-subtitle\"> The cognitive regeneration (-100 ~ 100) is: {cognitiveRegeneration} </h5>\n                        <br></br>\n                        <h4 className=\"submit-warning\"> {warning} </h4>\n                        <br></br> */}\n            <input type=\"submit\" name=\"submit\" className=\"submit action-button\" value=\"Submit\" />\n          </fieldset>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ReflectForm;\n","import { useState } from 'react';\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Alert from 'sweetalert2';\r\nimport swalWithBootstrapButtons from 'sweetalert2';\r\nimport Swal from 'sweetalert2';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst AddPartOfDayTask = ({ onAdd, timeOfDay, date}) => {\r\n  const onClick = () => {\r\n    Alert.fire({\r\n      title: 'Add New ' + timeOfDay + ' Event',\r\n      html:\r\n        `<input id=\"eventTitle\" class=\"swal2-input\" placeholder=\"Event Title\"> <br>` +\r\n        `<label for=\"eventStart\"> Choose a start time for your event </label>\r\n       <input id=\"eventStart\" type=\"time\" name=\"eventStart\" class=\"swal2-input\" required> <br>\r\n      ` +\r\n        `<label for=\"eventEnd\"> Choose an end time for your event </label>\r\n        <input id=\"eventEnd\" type=\"time\" name=\"eventEnd\" class=\"swal2-input\" required> <br>\r\n       `,\r\n      confirmButtonText: 'Save',\r\n      showCancelButton: true,\r\n      cancelButtonText: 'Cancel',\r\n      preConfirm: function () {\r\n        return new Promise(function (resolve) {\r\n          if (true) {\r\n            resolve([\r\n              document.getElementById('eventTitle').value,\r\n              document.getElementById('eventStart').value,\r\n              document.getElementById('eventEnd').value\r\n            ]);\r\n          }\r\n        });\r\n      }\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        onAdd({\r\n          title: result.value[0],\r\n          start: result.value[1],\r\n          end: result.value[2],\r\n          timeOfDay: timeOfDay\r\n        });\r\n        Alert.fire('Success!', 'Your edit is saved', 'success');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 class=\"heading-center\"> {timeOfDay} events </h1>\r\n      <div style={{ paddingBottom: '50px' }}>\r\n        <h2 class=\"heading-center\"> {date} </h2>\r\n        <Button\r\n          variant=\"btn btn-success\"\r\n          onClick={onClick}\r\n          style={{ display: 'inline-block', float: 'right', paddingRight: '20px' }}\r\n        >\r\n          {' '}\r\n          +{' '}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddPartOfDayTask;\r\n","import { Button } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst RedirectToNewPage = ({ function_to_check, url, text, alert_text }) => {\n  const [redirectToNextPage, setRedirect] = useState(false);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (function_to_check()) {\n      setRedirect(true);\n    } else {\n      alert(alert_text);\n      return;\n    }\n  };\n  if (redirectToNextPage) {\n    return <Redirect to={url} />;\n  } else {\n    return (\n      <form style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <Button variant=\"btn btn-success\" onClick={onSubmit}>\n          {text}\n        </Button>\n      </form>\n    );\n  }\n};\n\nexport default RedirectToNewPage;\n","import React from 'react';\nimport useState from 'react-usestateref';\nimport $ from 'jquery';\nimport ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\nimport Slider from 'rc-slider';\nimport { Redirect } from 'react-router-dom';\n\n//export default function App() {\n\nconst ReflectTask = ({ taskID, onAdd, updateRedirect }) => {\n  //jQuery time\n  var current_fs, next_fs, previous_fs; //fieldsets\n  //var left, opacity, scale; //fieldset properties which we will animate\n  var animating; //flag to prevent quick multi-click glitches\n  var current_idx; //current fieldset index\n\n  const [location, setLocation, locationRef] = useState('');\n  const [company, setCompany, companyRef] = useState('');\n  const [companyNumber, setCompanyNumber] = useState(0);\n  const [redirect, setRedirect] = useState(false);\n  const [activityName, setActivityName] = useState('');\n  const [sstart, setSstart, sstartRef] = useState('');\n  const [eend, setEend, eendRef] = useState('');\n  const [start, setStart, startRef] = useState('');\n  const [end, setEnd, endRef] = useState('');\n  const [date, setDate] = useState('');\n  const marks = {\n    '-100': 'None',\n    100: 'Tons'\n  };\n\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  console.log(taskID);\n  fetchTask(taskID).then((data) => {\n    setActivityName(data['text']);\n    setStart(data['start'].substring(11));\n    setEnd(data['end'].substring(11));\n    setDate(data['start'].substring(0, 11));\n  });\n  console.log(activityName);\n\n  $('.next').click(function () {\n    current_fs = $(this).parent();\n    current_idx = $('fieldset').index(current_fs);\n\n    $('.f1warning').text('');\n\n    if (current_idx === 1 && !locationRef.current) {\n      $('.f2warning').text('Warning: Please choose an activity location to proceed');\n      return;\n    } else {\n      $('.f2warning').text('');\n    }\n\n    if (current_idx === 2 && !companyRef.current) {\n      $('.f3warning').text('Warning: Please choose an activity company to proceed');\n      return;\n    } else {\n      $('.f3warning').text('');\n    }\n\n    if (animating) return false;\n    animating = true;\n\n    next_fs = $(this).parent().next();\n\n    //activate next step on progressbar using the index of next_fs\n    $('#progressbar li').eq($('fieldset').index(next_fs)).addClass('active');\n\n    //show the next fieldset\n    next_fs.show();\n    next_fs.animate({ opacity: 100 }, { duration: 1 });\n    //hide the current fieldset with style\n    current_fs.animate(\n      { opacity: 0 },\n      {\n        duration: 1,\n        complete: function () {\n          current_fs.hide();\n          animating = false;\n        }\n      }\n    );\n  });\n\n  $('.previous').click(function () {\n    if (animating) return false;\n    animating = true;\n\n    current_fs = $(this).parent();\n    previous_fs = $(this).parent().prev();\n\n    //de-activate current step on progressbar\n    $('#progressbar li').eq($('fieldset').index(current_fs)).removeClass('active');\n\n    //show the previous fieldset\n    previous_fs.show();\n    previous_fs.animate({ opacity: 100 }, { duration: 1 });\n    //hide the current fieldset with style\n    current_fs.animate(\n      { opacity: 0 },\n      {\n        duration: 1,\n        complete: function () {\n          current_fs.hide();\n          animating = false;\n        }\n      }\n    );\n  });\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // choose the update method here\n    onAdd(location, company, companyNumber, date + sstart, date + eend);\n    updateRedirect();\n\n    setLocation('');\n    setCompany('');\n    setCompanyNumber(0);\n    setRedirect(true);\n  };\n  if (redirect) {\n    return <Redirect to=\"/reflect\" />;\n  }\n\n  return (\n    <div className=\"row\">\n      <h1 style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        {' '}\n        {activityName}{' '}\n      </h1>\n      <h4 style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        {' '}\n        \"{start}\" : \"{end}\"{' '}\n      </h4>\n      <div className=\"col-md-8 col-md-offset-4\">\n        <form id=\"msform\" onSubmit={onSubmit}>\n          <ul id=\"progressbar\">\n            <li className=\"active\">Activity Time</li>\n            <li>Activity Location</li>\n            <li>Activity Company</li>\n            <li>Activity Company Number</li>\n            <li>Summary</li>\n          </ul>\n          <fieldset>\n            <h2 className=\"fs-title\">Activity Time</h2>\n            <h3 className=\"fs-subtitle\">\n              Tell us something more about your activity: {activityName}\n            </h3>\n            <label>Activity Time (Placeholder)</label>\n            <input\n              type=\"text\"\n              name=\"startTime\"\n              placeholder=\"Your Activity Start Time\"\n              value={sstart}\n              onChange={(e) => setSstart(e.target.value)}\n            />\n            <input\n              type=\"text\"\n              name=\"endTime\"\n              placeholder=\"Your Activity End Time\"\n              value={eend}\n              onChange={(e) => setEend(e.target.value)}\n            />\n            <br></br>\n            <h4 className=\"f1warning\"></h4>\n            <input type=\"button\" name=\"next\" className=\"next action-button\" value=\"Next\" />\n          </fieldset>\n          <fieldset>\n            <h2 className=\"fs-title\">Activity Location</h2>\n            <h3 className=\"fs-subtitle\">\n              Tell us something more about your activity: {activityName}\n            </h3>\n            <input\n              type=\"text\"\n              name=\"location\"\n              placeholder=\"Your Activity Location\"\n              value={locationRef.current}\n              onChange={(e) => setLocation(e.target.value)}\n            />\n            <br></br>\n            <h4 className=\"f2warning\"></h4>\n            <input\n              type=\"button\"\n              name=\"previous\"\n              className=\"previous action-button-previous\"\n              value=\"Previous\"\n            />\n            <input type=\"button\" name=\"next\" className=\"next action-button\" value=\"Next\" />\n          </fieldset>\n          <fieldset>\n            <h2 className=\"fs-title\">Activity Company</h2>\n            <h3 className=\"fs-subtitle\">\n              Tell us something more about your activity: {activityName}\n            </h3>\n            <input\n              type=\"text\"\n              name=\"company\"\n              placeholder=\"Your Activity Company\"\n              value={company}\n              onChange={(e) => setCompany(e.target.value)}\n            />\n            <br></br>\n            <h4 className=\"f3warning\"></h4>\n            <input\n              type=\"button\"\n              name=\"previous\"\n              className=\"previous action-button-previous\"\n              value=\"Previous\"\n            />\n            <input type=\"button\" name=\"next\" className=\"next action-button\" value=\"Next\" />\n          </fieldset>\n          <fieldset>\n            <h2 className=\"fs-title\">Activity Company Number</h2>\n            <h3 className=\"fs-subtitle\">\n              Tell us something more about your activity: {activityName}\n            </h3>\n            <label>Activity Company Number</label>\n            <input\n              type=\"text\"\n              name=\"company\"\n              placeholder=\"Your Activity Company Number\"\n              value={companyNumber}\n              onChange={(e) => setCompanyNumber(e.target.value)}\n            />\n            <br></br>\n            <br></br>\n            <input\n              type=\"button\"\n              name=\"previous\"\n              className=\"previous action-button-previous\"\n              value=\"Previous\"\n            />\n            <input type=\"button\" name=\"next\" className=\"next action-button\" value=\"Next\" />\n          </fieldset>\n          <fieldset>\n            <h2 className=\"fs-title\">Summary</h2>\n            <h3 className=\"fs-subtitle\">Please confirm the summary of activity: {activityName}</h3>\n            <h5 className=\"fs-subtitle\"> The start time is: {sstart} </h5>\n            <h5 className=\"fs-subtitle\"> The end time is: {eend} </h5>\n            <h5 className=\"fs-subtitle\"> The location is: {location} </h5>\n            <h5 className=\"fs-subtitle\"> The activity's company is: {company} </h5>\n            <h5 className=\"fs-subtitle\"> The activity's company number is: {companyNumber} </h5>\n            <input\n              type=\"button\"\n              name=\"previous\"\n              className=\"previous action-button-previous\"\n              value=\"Previous\"\n            />\n            <input type=\"submit\" name=\"submit\" className=\"submit action-button\" value=\"Submit\" />\n          </fieldset>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ReflectTask;\n","import ky from 'ky';\r\n\r\nconst api = ky.create({ prefixUrl: 'https://cogbackend.azurewebsites.net/' });\r\n\r\nconst get_log = async () => {\r\n  const res = await api.get('log');\r\n  return res.json();\r\n};\r\n\r\nconst get = async (url) => {\r\n  const res = await api.get(url);\r\n  return res.json();\r\n};\r\n\r\nconst post = async (url, data) => {\r\n  const res = await api.post(url, {\r\n    json: data\r\n  });\r\n  return res\r\n};\r\n\r\nconst put = async (url, data) => {\r\n    const res = await api.put(url, {\r\n        json: data\r\n    });\r\n    return res;\r\n};\r\n\r\nconst deleteWithPayload = async (url, payload) => {\r\n    const res = await api.delete(url, {\r\n        json: payload\r\n    });\r\n    return res;\r\n};\r\n\r\nexport { get_log, post, get, deleteWithPayload, put };\r\n","export default __webpack_public_path__ + \"static/media/cw-icon.665ba3f9.png\";","import { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { post } from '../utils/api';\r\nimport logo from '../cw-icon.png';\r\n\r\nconst Login = ({ onUpdate }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [redirectToNextPage, setRedirect] = useState(false);\r\n  const [correct, setCorrect] = useState(true);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!username || !password) {\r\n      alert('Please fill both username and password');\r\n      return;\r\n    }\r\n    const data_to_send = {\r\n      username: username,\r\n      password: password\r\n    };\r\n    post('credentials/get', data_to_send).then((res) => {\r\n      if (res['authorized'] === false) {\r\n        alert('Incorrect username or password');\r\n        setCorrect(false);\r\n        return;\r\n      } else {\r\n        onUpdate(username);\r\n        setRedirect(true);\r\n      }\r\n    });\r\n  };\r\n  if (redirectToNextPage) {\r\n    return <Redirect to=\"/onboardinginstructions\" />;\r\n  } else {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n          height: 'calc(100vh - 71px)'\r\n        }}\r\n      >\r\n        <div style={{\r\n            width: '50%',\r\n            height: '100%',\r\n            background: 'rgb(255,255,255)',\r\n            background: 'linear-gradient(0deg, rgba(255,255,255,1) 43%, rgba(233, 245, 253, 1) 100%)',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center'\r\n        }}>\r\n            <img src={logo} alt=\"logo\" style={{ width: '100%' }} />\r\n        </div>\r\n        {/* div for split thing into horizontal two parts */}\r\n        <form className=\"add-form1\" onSubmit={onSubmit}>\r\n          <h1\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              marginBottom: '10px'\r\n            }}\r\n          >\r\n            {' '}\r\n            Welcome to Diary!{' '}\r\n          </h1>\r\n          <h2\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              marginBottom: '50px',\r\n              color: 'gray'\r\n            }}\r\n          >\r\n            {' '}\r\n            Please log in to your account{' '}\r\n          </h2>\r\n          <div className=\"form-control\">\r\n            <label></label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"User ID\"\r\n              value={username}\r\n              onChange={(e) => setUsername(e.target.value)}\r\n              style={{ marginBottom: '30px', borderColor: correct ? 'black' : 'red' }}\r\n            />\r\n            <label></label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n              style={{ marginBottom: '60px', borderColor: correct ? 'black' : 'red' }}\r\n            />\r\n          </div>\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Log In\"\r\n            disabled={username === '' && password === ''}\r\n            className=\"btn btn-block\"\r\n            style={{ backgroundColor: username === '' && password === '' ? 'gray' : 'blue' }}\r\n          />\r\n        </form>{' '}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Login;\r\n","export default __webpack_public_path__ + \"static/media/icon.04ffa081.png\";","import { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport logo from '../icon.png';\n\nconst Landing = () => {\n  return (\n    <div>\n      <span className=\"landing\">\n        <img src={logo} alt=\"Logo\" className=\"center\" />\n        <h2 className=\"landing2\">COGNITIVE WORKLOAD DIARY</h2>\n        <p> Hello and welcome to your personal cognitive workload diary</p>\n      </span>\n    </div>\n  );\n};\n\nexport default Landing;\n","import { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nconst EndExperiment = ({ onUpdate }) => {\n  const [start, setStart] = useState('');\n  const [end, setEnd] = useState('');\n  const [redirectToNextPage, setRedirect] = useState(false);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (!start || !end) {\n      alert('Please fill both username and password');\n      return;\n    }\n    onUpdate(start, end);\n    setRedirect(true);\n  };\n  if (redirectToNextPage) {\n    return <Redirect to=\"/morningTasks\" />;\n  } else {\n    return (\n      <div>\n        <span className=\"landing\">\n          <h2 className=\"landing2\">Congratulations!</h2>\n          <p> You have finished the main portion of the study.</p>\n        </span>\n        <input type=\"submit\" value=\"Finish\" className=\"btn btn-block\" />\n      </div>\n    );\n  }\n};\n\nexport default EndExperiment;\n","import { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst OnBoardingInstructions = () => {\r\n  return (\r\n    <div>\r\n      <span className=\"landing\">\r\n        <h2\r\n          className=\"landing2\"\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            marginBottom: '10%',\r\n            fontWeight: 750,\r\n            fontSize: '28px',\r\n            color: '#3d3d3c'\r\n          }}\r\n        >\r\n          About the Cognitive Workload Diary\r\n        </h2>\r\n      </span>\r\n      <span style={{ justifyContent: 'center', display: 'flex' }}>\r\n        <h4\r\n          style={{\r\n            textAlign: 'center',\r\n            width: '50%',\r\n            marginBottom: '80px',\r\n            fontWeight: 450,\r\n            fontSize: '22px',\r\n            color: '#3d3d3c'\r\n          }}\r\n        >\r\n          {' '}\r\n          {/* We would like to learn what you did and how you felt yesterday. Not all days are the same\r\n          - some are better, some are worse and others are pretty typical. Here, we are only asking\r\n          you about yesterday.... */}\r\n          Not all days are the same - some are better, some are worse and others are pretty typical.\r\n          In this study, we would like to learn what you did and how your felt yesterday.\r\n        </h4>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OnBoardingInstructions;\r\n","import FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { Checkmark } from 'react-checkmark';\nimport { Redirect } from 'react-router-dom';\nimport Task from './Task';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  fcday: {\n    backgroundColor: 'grey'\n  }\n}));\n\nfunction CalendarWithContextForm({ events, date, onToggle, redirect, redirect_url }) {\n  const classes = useStyles();\n  var minTime = '00:00:00';\n  var maxTime = '24:00:00';\n  if (date == undefined || date.length === 0) {\n    var today = new Date().toISOString().slice(0, 10);\n  } else {\n    var today = date.substring(0, date.length - 1);\n  }\n\n  const eventClick = (info) => {\n    onToggle(info.event.id);\n  };\n  if (redirect) {\n    return <Redirect to={redirect_url} />;\n  }\n  return (\n    <div className=\"App\" class=\"calendar\">\n      <FullCalendar\n        headerToolbar={false}\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n        initialView=\"timeGridDay\"\n        events={events}\n        eventColor=\"white\"\n        eventTextColor=\"black\"\n        slotMinTime={minTime}\n        slotMaxTime={maxTime}\n        expandRows={true}\n        initialDate={today}\n        eventClick={eventClick}\n        height=\"700px\"\n        dayCellClassNames={classes.fcday}\n      />\n    </div>\n  );\n}\n\nexport default CalendarWithContextForm;\n","import FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Alert from 'sweetalert2';\r\nimport swalWithBootstrapButtons from 'sweetalert2';\r\nimport Swal from 'sweetalert2';\r\nimport { useState, useEffect } from 'react';\r\n\r\nfunction CalendarWithReflectForm({ events, date, onToggle, onDrop, redirect, redirect_url }) {\r\n  var minTime = '00:00:00';\r\n  var maxTime = '24:00:00';\r\n  if (date == undefined || date.length === 0) {\r\n    var today = new Date().toISOString().slice(0, 10);\r\n  } else {\r\n    var today = date.substring(0, date.length - 1);\r\n  }\r\n\r\n  const [cognitiveConsumption, setCognitiveConsumption] = useState(0);\r\n  const [cognitiveRegeneration, setCognitiveRegeneration] = useState(0);\r\n  const [selectedActivityOption, setSelectedActivityOption] = useState([]);\r\n  const [selectedLocationOption, setSelectedLocationOption] = useState([]);\r\n  const [selectedCompanyOption, setSelectedCompanyOption] = useState([]);\r\n  const [start, setStart] = useState('');\r\n  const [end, setEnd] = useState('');\r\n\r\n  const fetchTask = async (id) => {\r\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\r\n    const data = await res.json();\r\n    return data;\r\n  };\r\n\r\n  const eventClick = (info) => {\r\n    //fetch task info\r\n    console.log('info fetech started');\r\n    console.log(info.event.id);\r\n    fetchTask((info.event.id)).then((data) => {\r\n      setStart(data['start'].substring(11));\r\n      setEnd(data['end'].substring(11));\r\n      setCognitiveConsumption(data['cognitiveConsumption']);\r\n      setCognitiveRegeneration(data['cognitiveRegeneration']);\r\n      setSelectedActivityOption(data['activityType']);\r\n      setSelectedLocationOption(data['locationType']);\r\n      setSelectedCompanyOption(data['companyType']);\r\n    });\r\n    console.log(start);\r\n    console.log(cognitiveRegeneration);\r\n    console.log('info fetch ended');\r\n    Alert.fire({\r\n      title: info.event.title,\r\n      html:\r\n        '<label>Activity Type: ' +\r\n        selectedActivityOption.map(\r\n          (o) => '<option key={o.value} value={o.value}>' + o.label + '</option>'\r\n        ) +\r\n        '</label>' +\r\n        '<label>Cognitive Consumption (0 to 100): ' +\r\n        cognitiveConsumption +\r\n        '</label>' +\r\n        '<br></br>' +\r\n        '<label>Cognitive Regeneration (-100 to 0): ' +\r\n        cognitiveRegeneration +\r\n        '</label>' +\r\n        '<br></br>' +\r\n        '<label>Start Time: ' +\r\n        start +\r\n        '</label>' +\r\n        '<br></br>' +\r\n        '<label>End Time: ' +\r\n        end +\r\n        '</label>' +\r\n        '<br></br>' +\r\n        '<label>Location: ' +\r\n        selectedLocationOption.map(\r\n          (o) => '<option key={o.value} value={o.value}>' + o.label + '</option>'\r\n        ) +\r\n        '</label>' +\r\n        '<label>Company: ' +\r\n        selectedCompanyOption.map(\r\n          (o) => '<option key={o.value} value={o.value}>' + o.label + '</option>'\r\n        ) +\r\n        '</label>',\r\n      showCancelButton: true,\r\n      showDenyButton: true,\r\n      cancelButtonColor: '#3085d6',\r\n      confirmButtonText: 'Edit Infomation',\r\n      cancelButtonText: 'Close',\r\n      denyButtonText: 'Remove Event'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        onToggle((info.event.id));\r\n      }\r\n      if (result.isDenied) {\r\n        Alert.fire({\r\n          title: 'Delete Event?',\r\n          text: 'You are about to delete this event. Once deleted, it will no longer appear in the schedule. Are you sure you want to do this?',\r\n          icon: 'warning',\r\n          showCancelButton: true,\r\n          confirmButtonText: 'Yes, delete it!',\r\n          cancelButtonText: 'No, cancel!',\r\n          reverseButtons: true\r\n        }).then((result) => {\r\n          if (result.isConfirmed) {\r\n            info.event.remove(); // It will remove event from the calendar\r\n            onDrop((info.event.id));\r\n            swalWithBootstrapButtons.fire('Deleted!', 'This event has been deleted.', 'success');\r\n          } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n            swalWithBootstrapButtons.fire('Cancelled', 'This event is safe :)', 'error');\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  if (redirect) {\r\n    return <Redirect to={redirect_url} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\" class=\"calendar\">\r\n      <FullCalendar\r\n        headerToolbar={false}\r\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n        initialView=\"timeGridDay\"\r\n        events={events}\r\n        eventColor=\"#20bcffe2\"\r\n        slotMinTime={minTime}\r\n        slotMaxTime={maxTime}\r\n        expandRows={true}\r\n        initialDate={today}\r\n        eventClick={eventClick}\r\n        eventDurationEditable={true}\r\n        eventResize={onDrop}\r\n        editable={true}\r\n        eventDrop={onDrop}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CalendarWithReflectForm;\r\n","import { useState } from 'react';\nimport { Redirect, Link, useHistory } from 'react-router-dom';\nimport Task from './Task';\n\nconst TimeOfDay = ({ date, onDelete, onToggle }) => {\n  const [redirectToNextPage, setRedirect] = useState(false);\n  const history = useHistory();\n\n  let task1 = {\n    title: 'Morning events'\n  };\n  let task2 = {\n    title: 'Afternoon events'\n  };\n  let task3 = {\n    title: 'Evening events'\n  };\n  if (date == undefined || date.length === 0) {\n    history.push('/newday');\n  } else {\n    var today = date.substring(0, date.length - 1);\n  }\n\n  if (redirectToNextPage) {\n    return <Redirect to=\"/daysEvents\" />;\n  } else {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          paddingTop: '20px'\n        }}\n      >\n        <form className=\"add-form1\">\n          <h1\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              marginBottom: '10px'\n            }}\n          >\n            {' '}\n            Yesterday{' '}\n          </h1>\n          <h2\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              marginBottom: '50px',\n              color: 'gray'\n            }}\n          >\n            {' '}\n            {date}{' '}\n          </h2>\n          <div className=\"form-control\" style={{ transform: 'translate(-30px, -20px)' }}>\n            <Link to={'/morningTasks'}>\n              {' '}\n              <Task key={0} task={task1} onDelete={onDelete} onToggle={onToggle} />{' '}\n            </Link>\n            <Link to={'/afternoonTasks'}>\n              {' '}\n              <Task key={1} task={task2} onDelete={onDelete} onToggle={onToggle} />{' '}\n            </Link>\n            <Link to={'/eveningTasks'}>\n              {' '}\n              <Task key={2} task={task3} onDelete={onDelete} onToggle={onToggle} />{' '}\n            </Link>\n          </div>\n        </form>{' '}\n      </div>\n    );\n  }\n};\n\nexport default TimeOfDay;\n","import { Button } from 'react-bootstrap';\nimport { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Alert from 'sweetalert2';\nimport swalWithBootstrapButtons from 'sweetalert2';\nimport Swal from 'sweetalert2';\n\nconst RedirectWithPrompt = ({ url, text, alert_text }) => {\n  const [redirectToNextPage, setRedirect] = useState(false);\n\n  const onSubmit = (info) => {\n    Alert.fire({\n      title: 'Are you sure?',\n      html: `<div>\n          <p>\n          Once you click the finish button you won't be able to go back and make changes to your schedule. Are you sure you are done?\n          </p>\n        </div>\n        `,\n\n      showCancelButton: true,\n      cancelButtonColor: '#3085d6',\n      confirmButtonText: \"Yes I'm done\",\n      cancelButtonText: \"No I'm not done\"\n    }).then((result) => {\n      if (result.isConfirmed) {\n        setRedirect(true);\n      }\n    });\n  };\n\n  if (redirectToNextPage) {\n    return <Redirect to={url} />;\n  } else {\n    return (\n      <form style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <Button variant=\"btn btn-success\" onClick={onSubmit}>\n          {text}\n        </Button>\n      </form>\n    );\n  }\n};\n\nexport default RedirectWithPrompt;\n","import React, { forwardRef, useState } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { get_log } from '../utils/api';\r\nimport { useQuery } from 'react-query';\r\nimport { CSVLink } from 'react-csv';\r\n\r\n// Table icons\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n// TODO: this is dummy data. We should be fetching this data from the output-log endpoint.\r\nconst dummyData = [\r\n  {\r\n    userID: '123',\r\n    date: '02-15-22',\r\n    studyStartTime: '12:15:01',\r\n    studyGroup: 'Control'\r\n  },\r\n  {\r\n    userID: '125',\r\n    date: '02-16-22',\r\n    studyStartTime: '06:15:01',\r\n    studyGroup: 'Intervention'\r\n  },\r\n  {\r\n    userID: '127',\r\n    date: '02-20-22',\r\n    studyStartTime: '10:13:34',\r\n    studyGroup: 'Intervention'\r\n  },\r\n  {\r\n    userID: '128',\r\n    date: '02-20-22',\r\n    studyStartTime: '17:24:50',\r\n    studyGroup: 'Intervention'\r\n  },\r\n  {\r\n    userID: '123',\r\n    date: '02-15-22',\r\n    studyStartTime: '12:15:01',\r\n    studyGroup: 'Control'\r\n  },\r\n  {\r\n    userID: '125',\r\n    date: '02-16-22',\r\n    studyStartTime: '06:15:01',\r\n    studyGroup: 'Intervention'\r\n  },\r\n  {\r\n    userID: '127',\r\n    date: '02-20-22',\r\n    studyStartTime: '10:13:34',\r\n    studyGroup: 'Intervention'\r\n  },\r\n  {\r\n    userID: '128',\r\n    date: '02-20-22',\r\n    studyStartTime: '17:24:50',\r\n    studyGroup: 'Intervention'\r\n  },\r\n  {\r\n    userID: '123',\r\n    date: '02-15-22',\r\n    studyStartTime: '12:15:01',\r\n    studyGroup: 'Control'\r\n  },\r\n  {\r\n    userID: '125',\r\n    date: '02-16-22',\r\n    studyStartTime: '06:15:01',\r\n    studyGroup: 'Intervention'\r\n  },\r\n  {\r\n    userID: '127',\r\n    date: '02-20-22',\r\n    studyStartTime: '10:13:34',\r\n    studyGroup: 'Intervention'\r\n  },\r\n  {\r\n    userID: '128',\r\n    date: '02-20-22',\r\n    studyStartTime: '17:24:50',\r\n    studyGroup: 'Intervention'\r\n  }\r\n];\r\n\r\nconst ExperimentersLogPage = () => {\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const { data, isLoading, isError } = useQuery('log', get_log);\r\n  const headers = [\r\n    'user_id', \r\n    'date', \r\n    'end_of_study', \r\n    'study_group', \r\n    'wake_up_hour', \r\n    \"wake_up_minute\", \r\n    \"sleep_time_hour\", \r\n    \"sleep_time_minute\",\r\n    \"p3_duration\",\r\n    \"p3_start\",\r\n    \"p3_end\",\r\n    \"p4_duration\",\r\n    \"p4_next\",\r\n    \"p5_4_duration\",\r\n    \"p7_duration\",\r\n    \"p7_1_duration\",\r\n    \"p7_2_duration\",\r\n    \"p7_3_duration\",\r\n    \"p7_4_duration\",\r\n    \"Events\"\r\n  ];\r\n\r\n  if (isLoading) return <div>Loading...</div>;\r\n  if (isError) return <div>Error!</div>;\r\n  if (data) {\r\n    console.log(data);\r\n    return (\r\n      <div\r\n        id=\"experimenters-log-container\"\r\n        style={{\r\n          width: '80%',\r\n          margin: 'auto',\r\n          maxWidth: '1200px'\r\n        }}\r\n      >\r\n        <MaterialTable\r\n          columns={[\r\n            { title: 'User ID', field: 'user_id' },\r\n            { title: 'Date', field: 'date' },\r\n            { title: 'Study Start Time', field: 'end_of_study' }\r\n            // { title: 'Study Group', field: 'studyGroup' }\r\n          ]}\r\n          data={data}\r\n          title=\"Output Data Log\"\r\n          icons={tableIcons}\r\n          options={{\r\n            selection: true,\r\n            maxBodyHeight: 500,\r\n            paging: false,\r\n            headerStyle: { fontWeight: 750 }\r\n          }}\r\n          onSelectionChange={(data, rowData) => {\r\n            setSelectedRows(data);\r\n          }}\r\n        />\r\n        <div\r\n          id=\"export-btn-container\"\r\n          style={{\r\n            width: 'fit-content',\r\n            margin: '20px auto'\r\n          }}\r\n        >\r\n          <CSVLink data={selectedRows} headers={headers} filename=\"output-log.csv\">\r\n            <Button variant=\"primary\" size=\"lg\">\r\n              Export\r\n            </Button>\r\n          </CSVLink>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ExperimentersLogPage;\r\n","import { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\nimport history from './components/history';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Tasks from './components/Tasks';\r\nimport AddTask from './components/AddTask';\r\nimport About from './components/About';\r\nimport CalendarWithEditTime from './components/CalendarWithEditTime';\r\nimport Chart from './components/Chart';\r\nimport SelectDate from './components/SelectDate';\r\nimport DayStartAndEndTime from './components/DayStartAndEndTime';\r\nimport ContextForm from './components/ContextForm';\r\nimport ReflectForm from './components/ReflectForm';\r\nimport AddPartOfDayTask from './components/AddPartOfDayTask';\r\nimport RedirectToNewPage from './components/RedirectToNewPage';\r\nimport ReflectTask from './components/ReflectTask';\r\nimport Login from './components/Login';\r\nimport Landing from './components/Landing';\r\nimport EndExperiment from './components/EndExperiment';\r\nimport OnBoardingInstructions from './components/OnBoardingInstructions';\r\nimport CalendarWithContextForm from './components/CalendarWithContextForm';\r\nimport CalendarWithReflectForm from './components/CalendarWithReflectForm';\r\nimport TimeOfDay from './components/TimeOfDay';\r\nimport RedirectWithPrompt from './components/RedirectWithPrompt';\r\nimport ExperimentersLogPage from './components/ExperimentersLogPage';\r\nimport Alert from 'sweetalert2';\r\nimport swalWithBootstrapButtons from 'sweetalert2';\r\nimport Swal from 'sweetalert2';\r\nimport { Button } from 'react-bootstrap';\r\nimport { QueryClientProvider, QueryClient } from 'react-query';\r\nimport { get, post, deleteWithPayload, put } from './utils/api';\r\n\r\nconst App = () => {\r\n  const [showAddTask, setShowAddTask] = useState(false);\r\n  const [tasks, setTasks] = useState([]);\r\n  const [date, setDate] = useState('');\r\n  const [fullDate, setFullDate] = useState('');\r\n  const [userid, setUserid] = useState('');\r\n  const [start, setStart] = useState('');\r\n  const [end, setEnd] = useState('');\r\n  const [updatedTaskID, setUpdatedTaskID] = useState('');\r\n  const [redirectToNextPage, setRedirectToNextPage] = useState(false);\r\n  useEffect(() => {\r\n    const getTasks = async () => {\r\n      if (userid !== '' && date !== '') {\r\n        const tasksFromServer = await fetchTasks();\r\n        setTasks(tasksFromServer);\r\n        console.log(tasksFromServer)\r\n      }\r\n      else {\r\n        setTasks([]);\r\n      }\r\n    };\r\n\r\n    getTasks();\r\n  }, [userid, date]);\r\n\r\n  useEffect(() => {\r\n      console.log(date, userid)\r\n    }, [date, userid])\r\n\r\n  const queryClient = new QueryClient();\r\n\r\n  // Fetch Tasks\r\n  const fetchTasks = async () => {\r\n    const res = await get('events/get/allInDay/' + userid + '/' + date);\r\n\r\n    return res;\r\n  };\r\n\r\n  // Fetch Task\r\n  const fetchTask = async (event_id) => {\r\n    const res = await get('events/get/' + event_id);\r\n    return res;\r\n  };\r\n\r\n  // Add Task\r\n  const addTask = async (task) => {\r\n    task['start'] = date + task['start'];\r\n    task['end'] = date + task['end'];\r\n    task['user_id'] = userid;\r\n    task['id'] = task['event_id'];\r\n    task['date'] = date;\r\n    const res = await put('events/put', task);\r\n    const data = await res.json();\r\n    console.log(data);\r\n    setTasks([...tasks, data]);\r\n  };\r\n\r\n  // Delete Task\r\n  const deleteTask = async (id) => {\r\n    const task_to_delete = tasks.filter(task => task.id === id)[0];\r\n    const res = await deleteWithPayload('events/delete', task_to_delete);\r\n    setTasks(tasks.filter((task) => task.id !== id))\r\n  };\r\n\r\n  const updateTaskIDAndRedirect = async (id) => {\r\n    setUpdatedTaskID(id);\r\n    setRedirectToNextPage(true);\r\n  };\r\n\r\n  const updateTask = async (\r\n    location,\r\n    company,\r\n    cognitiveConsumption,\r\n    cognitiveRegeneration,\r\n    selectedActivityOption,\r\n    selectedLocationOption,\r\n    selectedCompanyOption\r\n  ) => {\r\n    const taskToToggle = tasks[updatedTaskID];\r\n    const updTask = {\r\n      ...taskToToggle,\r\n      companyOther: company,\r\n      locationOther: location,\r\n      cognitiveConsumption: cognitiveConsumption,\r\n      cognitiveRegeneration: cognitiveRegeneration,\r\n      activityType: selectedActivityOption,\r\n      locationType: selectedLocationOption,\r\n      companyType: selectedCompanyOption\r\n    };\r\n    \r\n    const data = await post('events/update', updTask);\r\n    setTasks(\r\n      tasks.map((task) =>\r\n        task.id === updatedTaskID\r\n          ? {\r\n              ...task,\r\n              location: location,\r\n              company: company,\r\n              cognitiveConsumption: cognitiveConsumption,\r\n              cognitiveRegeneration: cognitiveRegeneration,\r\n              activityType: selectedActivityOption,\r\n              locationType: selectedLocationOption,\r\n              companyType: selectedCompanyOption\r\n            }\r\n          : task\r\n      )\r\n    );\r\n  };\r\n\r\n  const updateReflectedTask = async (\r\n    location,\r\n    company,\r\n    selectedLocationOption,\r\n    selectedCompanyOption,\r\n    companyNumber,\r\n    start,\r\n    end\r\n  ) => {\r\n    const taskToToggle = tasks.filter(task => task.id === updatedTaskID)[0];\r\n    const updTask = {\r\n      ...taskToToggle,\r\n      company: company,\r\n      location: location,\r\n      locationType: selectedLocationOption,\r\n      companyType: selectedCompanyOption,\r\n      companyNumber: companyNumber,\r\n      start: start,\r\n      end: end\r\n    };\r\n    const res = await post('events/update', updTask);\r\n    setTasks(\r\n      tasks.map((task) =>\r\n        task.id === updatedTaskID\r\n          ? {\r\n              ...task,\r\n              company: company,\r\n              location: location,\r\n              locationType: selectedLocationOption,\r\n              companyType: selectedCompanyOption,\r\n              companyNumber: companyNumber,\r\n              start: start,\r\n              end: end\r\n            }\r\n          : task\r\n      )\r\n    );\r\n  };\r\n\r\n  const formatDateToString = (date) => {\r\n    var ret_str = '';\r\n    ret_str += date.getFullYear() + '-';\r\n    ret_str += appendZeroIfNecessary(parseInt(date.getMonth()) + 1) + '-';\r\n    ret_str += appendZeroIfNecessary(date.getDate()) + 'T';\r\n    ret_str += appendZeroIfNecessary(date.getHours()) + ':';\r\n    ret_str += appendZeroIfNecessary(date.getMinutes()) + ':';\r\n    ret_str += appendZeroIfNecessary(date.getSeconds());\r\n    return ret_str;\r\n  };\r\n\r\n  const appendZeroIfNecessary = (input_str) => {\r\n    return parseInt(input_str) >= 10 ? input_str : '0' + input_str;\r\n  };\r\n  const updateDroppedTask = async (info) => {\r\n    var new_start = formatDateToString(info.event.start);\r\n    var new_end = formatDateToString(info.event.end);\r\n    var task_id = (info.event.id);\r\n    var taskToToggle = tasks.filter(task => task.id === task_id)[0];\r\n    var updTask = { ...taskToToggle, start: new_start, end: new_end };\r\n    var res = await post('events/update', updTask);\r\n    setTasks(\r\n      tasks.map((task) =>\r\n        task.id === task_id ? { ...task, start: new_start, end: new_end } : task\r\n      )\r\n    );\r\n  };\r\n\r\n  const updateTaskTime = async (id, start, end) => {\r\n    const taskToToggle = tasks.filter((task) => task.id === id)[0];\r\n    const updTask = { ...taskToToggle, start: date + start, end: date + end };\r\n    const res = await post('events/update', updTask);\r\n    setTasks(\r\n      tasks.map((task) =>\r\n        task.id === id ? { ...task, start: date + start, end: date + end } : task\r\n      )\r\n    );\r\n  };\r\n\r\n  const toggleRedirect = async () => {\r\n    setRedirectToNextPage(false);\r\n  };\r\n\r\n  const updateDiaryDate = async (dateStr, fullDate, start, end) => {\r\n    setDate(dateStr);\r\n    setStart(start);\r\n    setEnd(end);\r\n    setFullDate(fullDate);\r\n  };\r\n\r\n  const updateStartTimeEndTime = async (start, end) => {\r\n    setStart(start);\r\n    setEnd(end);\r\n  };\r\n\r\n  const checkAllTasksHaveContext = () => {\r\n    const getTasks = async () => {\r\n      const tasksFromServer = await fetchTasks();\r\n      setTasks(tasksFromServer);\r\n    };\r\n\r\n    getTasks();\r\n    return tasks.filter((task) => task.cognitiveConsumption == undefined).length === 0;\r\n  };\r\n\r\n  const checkAllDays = () => {\r\n    let taska = tasks.filter((task) => task.timeOfDay === 'Morning');\r\n    let taskb = tasks.filter((task) => task.timeOfDay === 'Afternoon');\r\n    let taskc = tasks.filter((task) => task.timeOfDay === 'Evening');\r\n\r\n    return taska.length > 0 && taskb.length > 0 && taskc.length > 0;\r\n  };\r\n\r\n  const toggleReminder = async (id) => {\r\n    const taskToToggle = tasks.filter((task) => task.id === id)[0];\r\n    const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder };\r\n\r\n    const res = await post('events/update', updTask);\r\n\r\n    setTasks(tasks.map((task) => (task.id === id ? { ...task, reminder: updTask.reminder } : task)));\r\n  };\r\n\r\n  const doBoth = async (id) => {\r\n    await updateTaskIDAndRedirect(id);\r\n    await toggleReminder(id);\r\n  };\r\n\r\n  const addTaskPopup = () => {\r\n    Alert.fire({\r\n      title: 'Add New Event',\r\n      html:\r\n        `<input id=\"eventTitle\" class=\"swal2-input\" placeholder=\"Event Title\"> <br>` +\r\n        `<label for=\"eventStart\"> Choose a start time for your event </label>\r\n         <input id=\"eventStart\" type=\"time\" name=\"eventStart\" class=\"swal2-input\" required> <br>\r\n        ` +\r\n        `<label for=\"eventEnd\"> Choose an end time for your event </label>\r\n          <input id=\"eventEnd\" type=\"time\" name=\"eventEnd\" class=\"swal2-input\" required> <br>\r\n         `,\r\n      confirmButtonText: 'Save',\r\n      showCancelButton: true,\r\n      cancelButtonText: 'Cancel',\r\n      preConfirm: function () {\r\n        return new Promise(function (resolve) {\r\n          if (true) {\r\n            resolve([\r\n              document.getElementById('eventTitle').value,\r\n              document.getElementById('eventStart').value,\r\n              document.getElementById('eventEnd').value\r\n            ]);\r\n          }\r\n        });\r\n      }\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        addTask({\r\n          title: result.value[0],\r\n          start: result.value[1],\r\n          end: result.value[2],\r\n          timeOfDay: 'AllDay'\r\n        });\r\n        Alert.fire('Success!', 'Your edit is saved', 'success');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <Router>\r\n        <div>\r\n          <Route path='/' exact={true}>\r\n            <Redirect to=\"/landing\"/>\r\n          </Route>\r\n          <Header onAdd={() => setShowAddTask(!showAddTask)} showAdd={false} />\r\n          <Route\r\n            path=\"/landing\"\r\n            render={(props) => (\r\n              <>\r\n                <Landing />\r\n                <div\r\n                  style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    paddingTop: '20px'\r\n                  }}\r\n                >\r\n                  <RedirectToNewPage\r\n                    function_to_check={() => true}\r\n                    url={'/login'}\r\n                    text={'Get Started'}\r\n                  />\r\n                </div>\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/daysEvents\"\r\n            exact\r\n            render={(props) => (\r\n              <>\r\n                <h1 class=\"heading-center\"> {fullDate} </h1>\r\n                <div style={{ paddingBottom: '50px' }}>\r\n                  <h3 class=\"heading-center\"> Events set up </h3>\r\n                  <Button\r\n                    variant=\"btn btn-success\"\r\n                    onClick={addTaskPopup}\r\n                    style={{ display: 'inline-block', float: 'right', paddingRight: '20px' }}\r\n                  >\r\n                    {' '}\r\n                    +{' '}\r\n                  </Button>\r\n                </div>\r\n                <CalendarWithEditTime\r\n                  events={tasks}\r\n                  date={date}\r\n                  onDrop={updateDroppedTask}\r\n                  onDelete={deleteTask}\r\n                  onEdit={updateTaskTime}\r\n                />\r\n                <RedirectWithPrompt\r\n                  url={'/context'}\r\n                  text=\"Done\"\r\n                  alert_text=\"You have not filled out context information for all tasks yet!\"\r\n                />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/context\"\r\n            exact\r\n            render={(props) => (\r\n              <>\r\n                <div class=\"heading-center\">\r\n                  <h1> {fullDate} </h1>\r\n                  <h3> Events information </h3>\r\n                </div>\r\n                <CalendarWithContextForm\r\n                  events={tasks}\r\n                  date={date}\r\n                  onToggle={updateTaskIDAndRedirect}\r\n                  redirect={redirectToNextPage}\r\n                  fetchTasks={fetchTasks}\r\n                  redirect_url={'/contextForm'}\r\n                />\r\n                <RedirectToNewPage\r\n                  function_to_check={checkAllTasksHaveContext}\r\n                  url={'/chart'}\r\n                  text=\"Done\"\r\n                  alert_text=\"You have not filled out context information for all tasks yet!\"\r\n                />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/chart\"\r\n            render={(props) => (\r\n              <>\r\n                <Chart tasks={tasks} />\r\n                <RedirectToNewPage function_to_check={() => true} url={'/reflect'} text={'Done'} />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/reflect\"\r\n            exact\r\n            render={(props) => (\r\n              <>\r\n                <CalendarWithReflectForm\r\n                  events={tasks}\r\n                  date={date}\r\n                  onToggle={updateTaskIDAndRedirect}\r\n                  redirect={redirectToNextPage}\r\n                  redirect_url={'/reflectForm'}\r\n                  onDrop={updateDroppedTask}\r\n                />\r\n                <RedirectToNewPage\r\n                  function_to_check={() => true}\r\n                  url={'/chart'}\r\n                  text={'Return to chart'}\r\n                />\r\n                <RedirectToNewPage\r\n                  function_to_check={() => true}\r\n                  url={'/end'}\r\n                  text={'Finish this study'}\r\n                />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/reflectTask\"\r\n            render={(props) => (\r\n              <>\r\n                <ReflectTask\r\n                  taskID={updatedTaskID}\r\n                  onAdd={updateReflectedTask}\r\n                  updateRedirect={toggleRedirect}\r\n                />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/newday\"\r\n            render={(props) => (\r\n              <>\r\n                <SelectDate onUpdate={updateDiaryDate} />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/morningTasks\"\r\n            exact\r\n            render={(props) => (\r\n              <>\r\n                <AddPartOfDayTask onAdd={addTask} timeOfDay={'Morning'} date={fullDate} userid={userid} event_length={tasks.length} />\r\n                <CalendarWithEditTime\r\n                  events={tasks.filter((task) => task.timeOfDay === 'Morning')}\r\n                  timeOfDay={'Morning'}\r\n                  date={date}\r\n                  onDrop={updateDroppedTask}\r\n                  onDelete={deleteTask}\r\n                  onEdit={updateTaskTime}\r\n                />\r\n                <RedirectToNewPage\r\n                  function_to_check={() => true}\r\n                  url={'/timeofday'}\r\n                  text={'Done'}\r\n                />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/afternoonTasks\"\r\n            exact\r\n            render={(props) => (\r\n              <>\r\n                <AddPartOfDayTask onAdd={addTask} timeOfDay={'Afternoon'} date={fullDate} />\r\n                <CalendarWithEditTime\r\n                  events={tasks.filter((task) => task.timeOfDay === 'Afternoon')}\r\n                  timeOfDay={'Afternoon'}\r\n                  date={date}\r\n                  onDrop={updateDroppedTask}\r\n                  onDelete={deleteTask}\r\n                  onEdit={updateTaskTime}\r\n                />\r\n                <RedirectToNewPage\r\n                  function_to_check={() => true}\r\n                  url={'/timeofday'}\r\n                  text={'Done'}\r\n                />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/eveningTasks\"\r\n            exact\r\n            render={(props) => (\r\n              <>\r\n                <AddPartOfDayTask onAdd={addTask} timeOfDay={'Evening'} date={fullDate} />\r\n                <CalendarWithEditTime\r\n                  events={tasks.filter((task) => task.timeOfDay === 'Evening')}\r\n                  timeOfDay={'Evening'}\r\n                  date={date}\r\n                  onDrop={updateDroppedTask}\r\n                  onDelete={deleteTask}\r\n                  onEdit={updateTaskTime}\r\n                />\r\n                <RedirectToNewPage\r\n                  function_to_check={() => true}\r\n                  url={'/timeofday'}\r\n                  text={'Done'}\r\n                />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/contextForm\"\r\n            render={(props) => (\r\n              <>\r\n                <ContextForm\r\n                  taskID={updatedTaskID}\r\n                  onAdd={updateTask}\r\n                  updateRedirect={toggleRedirect}\r\n                />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/reflectForm\"\r\n            render={(props) => (\r\n              <>\r\n                <ReflectForm\r\n                  taskID={updatedTaskID}\r\n                  onAdd={updateReflectedTask}\r\n                  updateRedirect={toggleRedirect}\r\n                />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/login\"\r\n            render={(props) => (\r\n              <>\r\n                <Login onUpdate={(userid) => setUserid(userid)} />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/end\"\r\n            render={(props) => (\r\n              <>\r\n                <EndExperiment onUpdate={updateStartTimeEndTime} />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/onboardinginstructions\"\r\n            render={(props) => (\r\n              <>\r\n                <OnBoardingInstructions />\r\n                <RedirectToNewPage\r\n                  function_to_check={() => true}\r\n                  url={'/newday'}\r\n                  text={\"Let's Start\"}\r\n                />\r\n              </>\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/timeofday\"\r\n            render={(props) => (\r\n              <>\r\n                <TimeOfDay date={fullDate} onDelete={deleteTask} onToggle={doBoth} />\r\n                <RedirectToNewPage\r\n                  function_to_check={checkAllDays}\r\n                  url={'/daysEvents'}\r\n                  text={'Next'}\r\n                  alert_text={'You must add at least one event to each time of day.'}\r\n                />\r\n              </>\r\n            )}\r\n          />\r\n\r\n          <Route\r\n            path=\"/experimenterslog\"\r\n            render={(props) => (\r\n              <>\r\n                <ExperimentersLogPage />\r\n              </>\r\n            )}\r\n          />\r\n        </div>\r\n      </Router>\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n "],"sourceRoot":""}